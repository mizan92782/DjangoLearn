[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "django.urls",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.urls",
        "description": "django.urls",
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "students",
        "description": "students",
        "isExtraImport": true,
        "detail": "students",
        "documentation": {}
    },
    {
        "label": "django.http",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.http",
        "description": "django.http",
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "teachers",
        "description": "teachers",
        "isExtraImport": true,
        "detail": "teachers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "university.authentication.apps",
        "description": "university.authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'",
        "detail": "university.authentication.apps",
        "documentation": {}
    },
    {
        "label": "DefineUserForm",
        "kind": 6,
        "importPath": "university.authentication.forms",
        "description": "university.authentication.forms",
        "peekOfCode": "class DefineUserForm(UserCreationForm):\n  class Meta:\n    model = User\n    fields = ('username',  'first_name', 'last_name','email', 'password1', 'password2',)\n# login form",
        "detail": "university.authentication.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "university.authentication.urls",
        "description": "university.authentication.urls",
        "peekOfCode": "urlpatterns = [\n  django.urls.path('', views.authentication_form, name='auth_form'),\n  django.urls.path('dauth/', views.DefineAuthForm, name='define_auth_form'),\n  django.urls.path('login/', views.login_form, name='login_form'),\n  django.urls.path('logout/', views.logout_form, name='logout_form'),\n  django.urls.path('password/', views.password_change, name='password_form'),\n  ]",
        "detail": "university.authentication.urls",
        "documentation": {}
    },
    {
        "label": "authentication_form",
        "kind": 2,
        "importPath": "university.authentication.views",
        "description": "university.authentication.views",
        "peekOfCode": "def authentication_form(request):\n   if request.method == 'POST':\n     frm= UserCreationForm(request.POST)\n     if frm.is_valid():\n       frm.save()\n       # Optionally, redirect to a success page or login page\n       return render(request, 'logout_form')\n   else:\n      frm=UserCreationForm()\n   return render(request, 'authentication/authentication.html',{'form': frm})",
        "detail": "university.authentication.views",
        "documentation": {}
    },
    {
        "label": "DefineAuthForm",
        "kind": 2,
        "importPath": "university.authentication.views",
        "description": "university.authentication.views",
        "peekOfCode": "def DefineAuthForm(request):\n   if request.method=='POST':\n      frm = DefineUserForm(request.POST)\n      if frm.is_valid():\n         frm.save();\n         print(\"user crated succedfully\")\n   else:\n      frm = DefineUserForm()\n      print(\"user not created\")\n   return render(request, 'authentication/define_auth.html', {'form': frm})",
        "detail": "university.authentication.views",
        "documentation": {}
    },
    {
        "label": "login_form",
        "kind": 2,
        "importPath": "university.authentication.views",
        "description": "university.authentication.views",
        "peekOfCode": "def login_form(request):\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        print(f\"Submitted username: {username}\")\n        print(f\"Submitted password: {password}\")\n        frm = AuthenticationForm(request=request,data=request.POST)\n        if frm.is_valid():\n            serName = frm.cleaned_data['username']\n            UserPassword = frm.cleaned_data['password']",
        "detail": "university.authentication.views",
        "documentation": {}
    },
    {
        "label": "logout_form",
        "kind": 2,
        "importPath": "university.authentication.views",
        "description": "university.authentication.views",
        "peekOfCode": "def logout_form(request):\n    if request.method == 'POST':\n        logout(request)\n        print(\"User logged out successfully\")\n        # Optionally, redirect to a success page or login page\n        return redirect('login_form')\n    else:\n        print(\"GET request - rendering logout form\")\n    return render(request, 'authentication/logout.html')  # Adjust the template as needed\nfrom django.contrib.auth.forms import PasswordChangeForm",
        "detail": "university.authentication.views",
        "documentation": {}
    },
    {
        "label": "password_change",
        "kind": 2,
        "importPath": "university.authentication.views",
        "description": "university.authentication.views",
        "peekOfCode": "def password_change(request):\n    if request.method == 'POST':\n        # ঠিকভাবে arguments দিন\n        frm = PasswordChangeForm(request.user, request.POST)\n        if frm.is_valid():\n            frm.save()\n            update_session_auth_hash(request, frm.user)  # Session logout হওয়া ঠেকাতে\n            print(\"Password changed successfully.\")\n            # redirect করা ভালো, যাতে form re-submission না হয়\n            return redirect('login_form')  # আপনার URL name অনুসারে adjust করুন",
        "detail": "university.authentication.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "university.students.migrations.0001_initial",
        "description": "university.students.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('first_name', models.CharField(max_length=30)),",
        "detail": "university.students.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StudentAdmin",
        "kind": 6,
        "importPath": "university.students.admin",
        "description": "university.students.admin",
        "peekOfCode": "class StudentAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'last_name', 'batch')\n# Register your models here.\nadmin.site.register(Student, StudentAdmin)  # Assuming 'Student' is the model you want to register",
        "detail": "university.students.admin",
        "documentation": {}
    },
    {
        "label": "StudentConfig",
        "kind": 6,
        "importPath": "university.students.apps",
        "description": "university.students.apps",
        "peekOfCode": "class StudentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'students'",
        "detail": "university.students.apps",
        "documentation": {}
    },
    {
        "label": "StudentForm",
        "kind": 6,
        "importPath": "university.students.forms",
        "description": "university.students.forms",
        "peekOfCode": "class StudentForm(forms.ModelForm):\n  #meta defines this model connected with which model and which fields \n  # this model work for decleared model\n  class Meta:\n    model=Student\n    #this model take dat for this fields\n    fields = ['first_name', 'last_name', 'batch']\n  #clearn data under a condition\n  def clean_first_name(self):\n      first_name_validation = self.cleaned_data.get('first_name')",
        "detail": "university.students.forms",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "university.students.models",
        "description": "university.students.models",
        "peekOfCode": "class Student(models.Model):\n    \"\"\"\n    Model representing a student.\n    \"\"\"\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    batch = models.CharField(max_length=10)\n    #! This method returns a string representation of the model instance.\n    #!without this,it shows as object in admin interface\n    def __str__(self):",
        "detail": "university.students.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "university.students.urls",
        "description": "university.students.urls",
        "peekOfCode": "urlpatterns = [\n    path('home/', views.home, name='students_home'),  \n    path('input/', views.inputStudent, name='input_student'),  \n    path('output/', views.outputStudent, name='output_students'),  \n    #filter by regex\n    path('<int:batch>/', views.studentBatch, name='batch_students'),  \n]",
        "detail": "university.students.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "university.students.views",
        "description": "university.students.views",
        "peekOfCode": "def home(request):\n    \"\"\"\n    Render the home page for the students section.\n    \"\"\"\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return render(request, 'student/student_home.html',{'time':now})\n# input taken from the user\ndef inputStudent(request):\n    #if user clicks submit button\n    if request.method=='POST':",
        "detail": "university.students.views",
        "documentation": {}
    },
    {
        "label": "inputStudent",
        "kind": 2,
        "importPath": "university.students.views",
        "description": "university.students.views",
        "peekOfCode": "def inputStudent(request):\n    #if user clicks submit button\n    if request.method=='POST':\n        # 1. get the data from the form\n        #take full data in object from form\n        form =StudentForm(request.POST)\n        ''' or cane take individual variables\n        first_name = request.POST.get('first_name')\n        last_name = request.POST.get('last_name')\n        batch = request.POST.get('batch')",
        "detail": "university.students.views",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  outputStudent(args):\n    \"\"\"\n    Render the output page displaying all students.\n    \"\"\"\n    # 1. get all the data from the database\n    students = Student.objects.all()\n    # 2. create a response message\n    # 3. render the data in the template\n    return render(args, 'student/output_student.html', {'students': students})\ndef studentBatch(request, batch):"
        },
        "kind": 2,
        "importPath": "university.students.views",
        "description": "university.students.views",
        "peekOfCode": "def  outputStudent(args):\n    \"\"\"\n    Render the output page displaying all students.\n    \"\"\"\n    # 1. get all the data from the database\n    students = Student.objects.all()\n    # 2. create a response message\n    # 3. render the data in the template\n    return render(args, 'student/output_student.html', {'students': students})\ndef studentBatch(request, batch):",
        "detail": "university.students.views",
        "documentation": {}
    },
    {
        "label": "studentBatch",
        "kind": 2,
        "importPath": "university.students.views",
        "description": "university.students.views",
        "peekOfCode": "def studentBatch(request, batch):\n    \"\"\"\n    Render the output page displaying students from a specific batch.\n    \"\"\"\n    # 1. get all the data from the database for the specified batch\n    students = Student.objects.filter(batch=batch)\n    # 2. create a response message\n    # 3. render the data in the template\n    return render(request, 'student/batch_student.html', {'student': students})",
        "detail": "university.students.views",
        "documentation": {}
    },
    {
        "label": "TeacherConfig",
        "kind": 6,
        "importPath": "university.teachers.apps",
        "description": "university.teachers.apps",
        "peekOfCode": "class TeacherConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'teachers'",
        "detail": "university.teachers.apps",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "university.teachers.views",
        "description": "university.teachers.views",
        "peekOfCode": "def home(request):\n    \"\"\"\n    Render the home page for the teachers section.\n    \"\"\"\n    return django.http.HttpResponse('teachers home')",
        "detail": "university.teachers.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "university.university.asgi",
        "description": "university.university.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "university.university.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-hpk-&2p9x=#pnc0ueergl+f02kw!%drfz0+(#_!8xbx6#an_2)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-hpk-&2p9x=#pnc0ueergl+f02kw!%drfz0+(#_!8xbx6#an_2)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'students',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'students',\n    'teachers',\n    'authentication',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'university.urls'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "ROOT_URLCONF = 'university.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR/'templates'],  # Directory for custom templates\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR/'templates'],  # Directory for custom templates\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "WSGI_APPLICATION = 'university.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "university.university.settings",
        "description": "university.university.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "university.university.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "university.university.urls",
        "description": "university.university.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('students/', include('students.urls')),\n    path('teachers/', include('teachers.urls')),\n    path('auth/', include('authentication.urls')),\n]",
        "detail": "university.university.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "university.university.wsgi",
        "description": "university.university.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "university.university.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "university.manage",
        "description": "university.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'university.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "university.manage",
        "documentation": {}
    }
]